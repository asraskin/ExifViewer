<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/global.css"  type="text/css"?>
 
<window xmlns:html="http://www.w3.org/1999/xhtml"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" 
        title="Save Exif As Image" style="overflow:auto"
		id="exif_capture_window" onload="exif_moz.js:AlanSRaskin.ExifViewer.Capture.saveExifAsImage()">

<commandset>
	<command id="cmd_close" oncommand="close();"/>
</commandset>

<keyset>
	<key keycode="VK_ESCAPE" command="cmd_close"/>
</keyset>

<html:div id="output" flex="1" style="padding:.5em;margin-bottom:.5em;font-size:100%;"></html:div>
<html:canvas id="canvas" style="display:none;border:1px solid red"></html:canvas>

<script>
if (!AlanSRaskin)  var AlanSRaskin = {};
if (!AlanSRaskin.ExifViewer)  AlanSRaskin.ExifViewer = {};
if (!AlanSRaskin.ExifViewer.Capture)  AlanSRaskin.ExifViewer.Capture = {};

AlanSRaskin.ExifViewer.Capture.saveExifAsImage = function () {
	window.screenX = 200;//window.screen.width;
	window.screenY = 200;//window.screen.height;
//	setTimeout("_saveExifAsImage2()", 2);
//}	// saveExifAsImage()

//AlanSRaskin.ExifViewer.Capture._saveExifAsImage2 = function () {
//	alert(window.screenX + '\n' + window.screen.width);
//	window.screenX = window.screen.width;
	var opener = window.opener;

	var source_div = opener.document.getElementById('outputDiv');
	if (source_div) {
		var div = document.getElementById('output');
		div.innerHTML = source_div.innerHTML;
		setTimeout("AlanSRaskin.ExifViewer.Capture._saveExifAsImage3()", 100);
	}
}	// _saveExifAsImage2()

AlanSRaskin.ExifViewer.Capture._saveExifAsImage3 = function () {
	var div = document.getElementById('output');
	var w = div.offsetWidth;
	var h = div.offsetHeight;
//	alert(w + '\n' + h);
	if (w > 10000)  w = 5000;
	if (h > 10000) h = 5000;
	window.height = h;
	window.width = w;
	var canvas = document.getElementById("canvas");
	canvas.style.width = w + "px";
	canvas.style.height = h + "px";
	canvas.width = w;
	canvas.height = h;
	var ctx = canvas.getContext("2d");
	ctx.clearRect(0, 0, w, h);
	ctx.drawWindow(window, 0, 0, w, h, "rgb(0,0,0)");
	AlanSRaskin.ExifViewer.Capture.saveCanvas(canvas, 'c:\\', 'canvas.png');
	close();
}	// _saveExifAsImage3()

// from MDC: http://developer.mozilla.org/en/docs/Code_snippets:Canvas
AlanSRaskin.ExifViewer.Capture.saveCanvas = function (canvas, destDir, destFile) {
	var nsIFilePicker = Components.interfaces.nsIFilePicker;
	var fp = Components.classes["@mozilla.org/filepicker;1"]
					   .createInstance(nsIFilePicker);
	fp.init(window, "Select a File", nsIFilePicker.modeSave);
	
	// convert string filepath to an nsIFile
	var file = Components.classes["@mozilla.org/file/local;1"]
						 .createInstance(Components.interfaces.nsILocalFile);
	file.initWithPath(destDir + destFile);
	
	fp.displayDirectory = file;
	fp.defaultString = destFile;
	fp.appendFilter("PNG Files", "*.png");
	fp.appendFilter("JPEG Files", "*.jpg; *.jpeg");
	fp.appendFilter("GIF Files", "*.gif");

	if (fp.show() == nsIFilePicker.returnCancel) {
		return;
	}
	file = fp.file;
	var mimeTypes = new Array("image/jpeg", "image/png", "image/gif");
	
	// create a data url from the canvas and then create URIs of the source and targets  
	var io = Components.classes["@mozilla.org/network/io-service;1"]
					   .getService(Components.interfaces.nsIIOService);
	var source = io.newURI(canvas.toDataURL(mimeTypes[fp.filterIndex], ""), "UTF8", null);
	var target = io.newFileURI(file)
  
	// prepare to save the canvas data
	var persist = Components.classes["@mozilla.org/embedding/browser/nsWebBrowserPersist;1"]
							.createInstance(Components.interfaces.nsIWebBrowserPersist);

	persist.persistFlags = Components.interfaces.nsIWebBrowserPersist.PERSIST_FLAGS_REPLACE_EXISTING_FILES;
	persist.persistFlags |= Components.interfaces.nsIWebBrowserPersist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;

	// displays a download dialog (remove these 3 lines for silent download)
	var xfer = Components.classes["@mozilla.org/transfer;1"]
						 .createInstance(Components.interfaces.nsITransfer);
	xfer.init(source, target, "", null, null, null, persist);
	persist.progressListener = xfer;

	// save the canvas data to the file
	persist.saveURI(source, null, null, null, null, file);
}	// saveCanvas()
</script>
</window>